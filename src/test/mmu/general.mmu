#include "address.mmu"

//==================================================================================================
// Translation Lookaside Buffer (TLB)
//==================================================================================================

let JTLB_WAYS = 2 ** 6

buffer JTLB (va: VA)
  ways   = JTLB_WAYS
  sets   = 1
  entry  = (ASID: 8, VPN2: 27, R: 2,               // EntryHi
            G0: 1, V0: 1, D0: 1, C0: 3, PFN0: 24,  // EntryLo0
            G1: 1, V1: 1, D1: 1, C1: 3, PFN1: 24)  // EntryLo1
  index  = 0
  match  = VPN2 == va.value<39..13> // ASID, G and non-4KB pages are unsupported
  policy = NONE

buffer DTLB (va: VA) viewof JTLB
  ways   = 4
  sets   = 1
  index  = 0
  match  = VPN2 == va.value<39..13> // ASID, G and non-4KB pages are unsupported
  policy = PLRU

//--------------------------------------------------------------------------------------------------
// User Mode Segments
//--------------------------------------------------------------------------------------------------

segment USEG (va: VA) = (pa : PA)
  range = (0x0000000000000000, 0x000000007fffffff)

  var tlbEntry: JTLB.entry;

  var evenOddBit: 5;

  var g: 1;
  var v: 1;
  var d: 1;
  var c: 3;
  var pfn: 24;

  read = {
    // The address hits the DTLB.
    if DTLB(va).hit then
      tlbEntry = DTLB(va);
    // The address hits the JTLB.
    elif JTLB(va).hit then
      tlbEntry = JTLB(va);
    // The address does not hit the TLB.
    else
      exception("TLBMiss");
    endif; // If the address hits the DTLB.

    // Only 4KB pages are supported.
    evenOddBit = 12;

    // The VPN is even.
    if va.value<evenOddBit> == 0 then
      g   = tlbEntry.G0;
      v   = tlbEntry.V0;
      d   = tlbEntry.D0;
      c   = tlbEntry.C0;
      pfn = tlbEntry.PFN0;
    // The VPN is odd.
    else
      g   = tlbEntry.G1;
      v   = tlbEntry.V1;
      d   = tlbEntry.D1;
      c   = tlbEntry.C1;
      pfn = tlbEntry.PFN1;
    endif; // If the VPN is even.

    // The EntryLo is valid.
    if v == 1 then
      pa.value = pfn<23..(evenOddBit - 12)>::va.value<(evenOddBit - 1)..0>;
    // The EntryLo is invalid.
    else
      exception("TLBInvalid");
    endif; // If the EntryLo is valid.
  }

segment XUSEG(va: VA) = (pa : PA)
  range = (0x0000000080000000, 0x000000ffffffffff)

//--------------------------------------------------------------------------------------------------
// Supervisor Mode Segments
//--------------------------------------------------------------------------------------------------

segment SUSEG(va: VA) = (pa : PA)
  range = (0x0000000000000000, 0x000000007fffffff)

segment XSUSEG(va: VA) = (pa : PA)
  range = (0x0000000080000000, 0x000000ffffffffff)

segment XSSEG(va: VA) = (pa : PA)
  range = (0x4000000000000000, 0x400000ffffffffff)
  
segment CSSEG(va: VA) = (pa : PA)
  range = (0xffffffffc0000000, 0xffffffffdfffffff)

//--------------------------------------------------------------------------------------------------
// Kernel Mode Segments
//--------------------------------------------------------------------------------------------------

segment KUSEG (va: VA) = (pa : PA)
  range = (0x0000000000000000, 0x000000007fffffff)

segment XKUSEG (va: VA) = (pa : PA)
  range = (0x0000000080000000, 0x000000ffffffffff)

segment XKSSEG (va: VA) = (pa : PA)
  range = (0x4000000000000000, 0x400000ffffffffff)

segment XKSEG (va: VA) = (pa : PA)
  range = (0xc000000000000000, 0xc00000ff7fffffff)

segment CKSSEG (va: VA) = (pa : PA)
  range = (0xffffffffc0000000, 0xffffffffdfffffff)

segment CKSEG3(va: VA) = (pa : PA)
  range = (0xffffffffe0000000, 0xffffffffffffffff)


//==================================================================================================
// Cache Memory (L1 and L2)
//==================================================================================================

buffer L1 (pa: PA)
  ways   = 4
  sets   = 128
  entry  = (V: 1 = 0, TAG: 24, DATA: 256)
  index  = pa.value<11..5>
  match  = V == 1 && TAG == pa.value<35..12>
  policy = PLRU

buffer L2 (pa: PA)
  ways   = 4
  sets   = 4096
  entry  = (V: 1 = 0, TAG: 19, DATA: 256)
  index  = pa.value<16..5>
  match  = V == 1 && TAG == pa.value<35..17>
  policy = PLRU

buffer Memory (pa: PA)
  ways   = 1
  sets   = 1 << (64 - 5)
  entry  = (DATA: 256)
  index  = pa.value<63..5>
  match  = 0

//==================================================================================================
// MMU Logic (Interaction between TLB, L1 and L2)
//==================================================================================================

function getWordFromLine(wordIndex: 2, line: 256): 64
{
  if   wordIndex == 0 then return line<63..0>;
  elif wordIndex == 1 then return line<127..64>;
  elif wordIndex == 2 then return line<191..128>;
  else                     return line<255..192>; endif;
}

function putWordIntoLine(wordIndex: 2, line: 256, data: 64): 256
var intline: 256;
{
  intline = line;
  if   wordIndex == 0 then intline<63..0>    = data;
  elif wordIndex == 1 then intline<127..64>  = data;
  elif wordIndex == 2 then intline<191..128> = data;
  else                     intline<255..192> = data; endif;
  return intline;
}

mmu pmem (va: VA) = (data: 64)
  var l1Entry: L1.entry;
  var l2Entry: L2.entry;
  var wordIndex: 2;

  var evenOddBit: 5;

  var g: 1;
  var v: 1;
  var d: 1;
  var c: 3;
  var pfn: 24;

  var pa: PA;
  var cacheData: 256;

  read = {
    // The address is unaligned.
    if va.value<2..0> != 0 then
      exception("AddressError");
    endif; // If the address is unaligned.

    // The default cache policy.
    c = 3;

    // The address is from the USEG segment (only USEG and KSEG segments are supported).
    if USEG(va).hit then
      pa = USEG(va);
    // The address is from the KSEG0 or KSEG1 segment.
    else
      pa.value<28..0> = va.value<28..0>;
      pa.value<35..29> = 0;
    endif; // If the address is from the USEG segment.

    wordIndex = pa.value<4..3>;

    // The address is cacheable.
    if c<1..0> != 2 then
      // The address hits the L1.
      if L1(pa).hit then
        l1Entry = L1(pa);
        cacheData = l1Entry.DATA;
      // The address does not hit the L1.
      else
        // The L2 cache is used.
        if c<1..0> == 3 then
          // The address hits the L2.
          if L2(pa).hit then
            l2Entry = L2(pa);
            cacheData = l2Entry.DATA;

            // Fill the L1.
            l1Entry.V = 1;
            l1Entry.TAG = pa.value<35..12>;
            l1Entry.DATA = cacheData;
            L1(pa) = l1Entry;
          // The address does not hit the L2.
          else
            cacheData = Memory(pa);

            // Fill L2.
            l2Entry.V = 1;
            l2Entry.TAG = pa.value<35..17>;
            l2Entry.DATA = cacheData;
            L2(pa) = l2Entry;

            // Fill L1.
            l1Entry.V = 1;
            l1Entry.TAG = pa.value<35..12>;
            l1Entry.DATA = cacheData;
            L1(pa) = l1Entry;
          endif; // If the address hits the L2.
        // The L2 cache is bypassed.
        else
          cacheData = Memory(pa);

          l1Entry.V = 1;
          l1Entry.TAG = pa.value<35..12>;
          l1Entry.DATA = cacheData;
          L1(pa) = l1Entry;
        endif; // If the L2 cache is used.
      endif; // If the address hits the L1.
    // The address is uncacheable.
    else
      cacheData = Memory(pa);
    endif; // If the address is cacheable.

    data = getWordFromLine(wordIndex, cacheData);
  }

  write = {
    // The address is unaligned.
    if va.value<2..0> != 0 then
      exception("AddressError");
    endif; // If the address is unaligned.

    // The default cache policy.
    c = 3;

    // The address is from the USEG segment (only USEG and KSEG segments are supported).
    if USEG(va).hit then
      pa = USEG(va);
    // The address is from the KSEG0 or KSEG1 segment.
    else
      pa.value<28..0> = va.value<28..0>;
      pa.value<35..29> = 0;
    endif; // If the address is from the USEG segment.

    wordIndex = pa.value<4..3>;

    // The address is cacheable.
    if c<1..0> != 2 then
      // The address hits the L1.
      if L1(pa).hit then
        // Update the L1.
        l1Entry = L1(pa);
        l1Entry.DATA = putWordIntoLine(wordIndex, l1Entry.DATA, data);
        L1(pa) = l1Entry;

        // Only the write-through policy is supported.
        Memory(pa) = l1Entry.DATA;
      // The address does not hit the L1.
      else
        // The L2 cache is used.
        if c<1..0> == 3 then
          // The address hits the L2.
          if L2(pa).hit then
            // Update the L2.
            l2Entry = L2(pa);
            l2Entry.DATA = putWordIntoLine(wordIndex, l2Entry.DATA, data);
            L2(pa) = l2Entry;

            // Fill the L1.
            l1Entry.V = 1;
            l1Entry.TAG = pa.value<35..12>;
            l1Entry.DATA = l2Entry.DATA;
            L1(pa) = l1Entry;

            // Only the write-through policy is supported.
            Memory(pa) = l1Entry.DATA;
          // The address does not hit the L2.
          else
            cacheData = Memory(pa);
            cacheData = putWordIntoLine(wordIndex, cacheData, data);
            Memory(pa) = cacheData;

            // Fill the L2.
            l2Entry.V = 1;
            l2Entry.TAG = pa.value<35..17>;
            l2Entry.DATA = cacheData;
            L2(pa) = l2Entry;

            // Fill the L1.
            l1Entry.V = 1;
            l1Entry.TAG = pa.value<35..12>;
            l1Entry.DATA = cacheData;
            L1(pa) = l1Entry;
          endif; // If the address hits the L2.
        // The L2 cache is bypassed.
        else
          cacheData = Memory(pa);
          cacheData = putWordIntoLine(wordIndex, cacheData, data);
          Memory(pa) = cacheData;

          // Fill the L2
          l1Entry.V = 1;
          l1Entry.TAG = pa.value<35..12>;
          l1Entry.DATA = cacheData;
          L1(pa) = l1Entry;
        endif; // If the L2 cache is used.
      endif; // If the address hits the L1.
    // The address is uncacheable.
    else
      cacheData = Memory(pa);
      cacheData = putWordIntoLine(wordIndex, cacheData, data);
      Memory(pa) = cacheData;
    endif; // If the address is cacheable.
  }

//==================================================================================================
// The End
//==================================================================================================

