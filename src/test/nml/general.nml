// JUST GENERAL TESTS
// OR SOME MIXED-CONSTRUCT TESTS

let SIZE = 10
let REGS = 16
let BIG  = 0xFFFFFFFFFF

type MYTYPE = card(SIZE)

type BYTE   = card(8)
type CHAR   = int(8)

type WORD   = card(16)
type SHORT  = int(16)

type DWORD  = card(32)
type LONG   = int(32)
  
type bit    = card(1)

type byte1  = card(8)
type byte2  = byte1

mem TEST_MEM1 [REGS*2, card(32)]

reg TEST_REG1 [REGS,   DWORD]
var TEST_VAR1 [REGS,   LONG]

mem TEST_MEM2 [2*REGS,   card(32)]
reg TEST_REG2 [2*REGS+1, card(2**8)]

// let AA = TEST_MEM1[1]

mode MMM()

op test(m: MMM)
  syntax = "test"
  image  = "0010"
  action = {
    TEST_REG1[0] = TEST_REG1[0]<0..31> + 1;
    TEST_REG1[1] = zero_extend(DWORD, TEST_REG1[1]<8>) + 1;
    TEST_REG1[1] = zero_extend(DWORD, TEST_REG1[1]<1 + TEST_REG2 - 1..1 + TEST_REG2 + 5>) + 1;
  }

op instruction (x : test)
    syntax = x.syntax
    image = x.image
    action = {
        x.action;
    }
