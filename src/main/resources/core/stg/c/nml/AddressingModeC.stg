/*
 * Copyright 2012-2015 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group AddressingMode;


mode_attribute(primitive_name, name, rettype, stmts, override, usePE, arg_names, arg_types) ::= <<
<rettype> <primitive_name>_<name>(IsaPrimitive* isa, <if(usePE)>void* procElem, <endif>void* tempVars) {
  PE* pe__ = <if(usePE)> (PE*) procElem<else>NULL<endif>;
  TempVars* vars__ = (TempVars*) tempVars;
  <init_args(arg_names)>

  <stmts; separator="\n">
}
>>

mode(
  name, file, imps,
  arg_names, arg_types, arg_checks, arg_tnames, isa_type, arg_count, attrs, pack, simps, base, ret, has_init
) ::= <<
#ifndef <name>_H_INCLUDED
#define <name>_H_INCLUDED

#include "../PE.h"
#include "../TempVars.h"
#include "../../Location.h"
#include "../../operations_int.h"

<header(file)>

<attrs; separator="\n\n">
<if(ret)><\n><mode_attribute(name, "access", "Location*", ret:{e|return <e>;}, true, true, arg_names, arg_types)><endif>
<constructor_build(name, arg_names, arg_types, isa_type, arg_count, ret, has_init)>
#endif
>>

constructor_build(name, arg_names, arg_types, isa_type, arg_count, ret, has_init) ::= <<

IsaPrimitive* <name>(<get_func_param(arg_names, arg_types)>) {
  IsaPrimitive** <name>_args = (IsaPrimitive**) malloc(sizeof(IsaPrimitive*) * <arg_count>);
  IsaPrimitive* obj = (IsaPrimitive*) malloc(sizeof(IsaPrimitive));

  //obj->type = <isa_type>_<name>;
  obj->action = <name>_action;
  obj->image = <name>_image;
  obj->syntax = <name>_syntax;
  obj->args = <name>_args;
  obj->argc = <arg_count>;
  obj->decode = <name>_decode;
  <if(ret)>obj->access = <name>_access;<endif>
  <if(has_init)>obj->init = <name>_init;<endif>

  <get_args(arg_names)>

  return obj;
};
>>

get_func_param(arg_names, arg_types) ::= <<
<arg_names, arg_types:{n, t | IsaPrimitive* <n>}; separator=", ">
>>

get_args(arg_names) ::= <<
<arg_names:{n | obj->args[<i0>] = <n>;}; separator="\n">
>>

init_args(arg_names) ::= <<
<arg_names:{n | IsaPrimitive* <n> = isa->args[<i0>];}; separator="\n">
>>