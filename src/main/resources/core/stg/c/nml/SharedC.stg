/*
 * Copyright 2012-2016 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group Shared;

type(name, typeid, size) ::= <<
<class_const("Type", name, new_type(typeid, size))>
>>

new_type(typeid, size) ::= <<
Type.<typeid>(<size>)
>>

type_alias(name, alias) ::= <<
<class_const("Type", name, alias)>
>>

memory(name, kind, type, size, alias) ::= <<
<class_const("Memory", name, new_memory(kind, name, type, size, alias))>
>>

new_memory(kind, name, type, size, alias) ::= <<
Memory_constructor("<name>",  <size>)
>>

new_label(name, memory, index) ::= <<
new Label("<name>", <memory>, <index>)
>>

processing_element(struct, names, defs, copies, labels) ::= <<
PE <struct>_constructor() {
  PE pe__ = {
    <set_fields(names, defs)>
  };

  return pe__;
}<\n>

>>

temporary_variables(struct, names, defs) ::= <<
PE <struct>_constructor() {
  PE pe__ = {
    <set_fields(names, defs)>
  };

  return pe__;
}<\n>

>>

factory() ::= <<
private static final class <name>Factory implements Factory {
  @Override
  public <name> create() {
    return new <name>();
  }
}<\n>
public static Factory newFactory() {
  return new <name>Factory();
}
>>

set_fields(arg_names, defs) ::= <<
<arg_names, defs:{n, d| .<n> = <d>;}; separator="\n">
>>

pe_constructor(file, pack, name, ext, impls, imps, simps, members, instance, names) ::= <<
<header(file)>
typedef struct PE {
   <names:{n | Memory* <n>;}; separator="\n"><\n>
} PE;
<\n>
<members; separator="\n">
>>

temp_constructor(file, pack, name, ext, impls, imps, simps, members, instance, names) ::= <<
<header(file)>
typedef struct TEMP {
   <names:{n | Memory* <n>;}; separator="\n"><\n>
} TEMP;
<\n>
<members; separator="\n">
>>