/*
 * Copyright 2018 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group WhymlBitVector;

header(year) ::= <<
(*
 * Copyright <year> ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 * N.B. THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT MODIFY IT.
 *)<\n>
>>

bit_vector_file(year, bit_size, two_power_size, half_two_power_size, max_int) ::= <<
<header(year)>
theory BV<bit_size>
  constant size                : int = <bit_size>
  constant two_power_size      : int = <two_power_size>
  constant half_two_power_size : int = <half_two_power_size>

  use int.Int
  use ispras.bvgen.BV_Gen

  type bv<bit_size> = \< range 0 <max_int> >

  clone export ispras.bvgen.BV_Gen with
    type t = bv<bit_size>,
    (*function to_int = t'int,*)
    constant size = size,
    constant two_power_size = two_power_size,
    constant half_two_power_size = half_two_power_size,
    constant max_int = bv<bit_size>'maxInt,
    goal size_pos,
    goal two_power_size_val,
    goal half_two_power_size_val,
    goal max_int_val
end<\n>
>>

import_bit_vectors(sizes) ::= <<
<sizes:{size | use import ispras.bv<size>.BV<size>}; separator="\n"><\n>
>>

bv_type(size) ::= <<
BV<size>.bv<size>
>>

bit_vector_concat_file(year, first_size, second_size, result_size, import_sizes) ::= <<
<header(year)>
theory BvConcat_<first_size>_<second_size>
  use ispras.bvcasts.BVConcat_Gen
  <import_bit_vectors(import_sizes)>
  clone export ispras.bvcasts.BVConcat_Gen with
    type  firstBV = <bv_type(first_size)>,
    type secondBV = <bv_type(second_size)>,
    type resultBV = <bv_type(result_size)>
end<\n>
>>

bit_vector_extract_file(year, source_size, field_size, import_sizes) ::= <<
<header(year)>
theory BvExtract_<source_size>_<field_size>
  use ispras.bvcasts.BVExtract_Gen
  <import_bit_vectors(import_sizes)>
  clone export ispras.bvcasts.BVExtract_Gen with
    type   fromBV = <bv_type(source_size)>,
    type resultBV = <bv_type(field_size)>
end<\n>
>>

bit_vector_cast_file(year, small_size, big_size, import_sizes, max_small) ::= <<
<header(year)>
theory BvCast_<small_size>_<big_size>
  use ispras.bvcasts.BVCast_Gen
  <import_bit_vectors(import_sizes)>
  predicate in_range (b : <bv_type(big_size)>) = BV<big_size>.ule b (<max_small>:<bv_type(big_size)>)<\n>
  clone export ispras.bvcasts.BVCast_Gen with
    type smallBV = <bv_type(small_size)>,
    type   bigBV = <bv_type(big_size)>,
    predicate in_small_range = in_range,
    function to_uint_small = BV<small_size>.to_uint,
    function to_uint_big   = BV<big_size>.to_uint
end<\n>
>>
