/*
 * Copyright 2012-2016 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group Shared;

type(name, typeid, size) ::= <<
<class_const("Type", name, new_type(typeid, size))>
>>

new_type(typeid, size) ::= <<
Type.<typeid>(<size>)
>>

type_alias(name, alias) ::= <<
<class_const("Type", name, alias)>
>>

memory(name, kind, type, size, alias) ::= <<
<class_const("Memory", name, new_memory(kind, name, type, size, alias))>
>>

new_memory(kind, name, type, size, alias) ::= <<
Memory.def(Memory.Kind.<kind>, "<name>", <type>, <size><if(alias)>, <alias><endif>)
>>

new_label(name, memory, index) ::= <<
new Label("<name>", <memory>, <index>)
>>

processing_element(class, names, defs, copies, labels) ::= <<
<names:{n | public final Memory <n>;}; separator="\n"><\n>
private <class>() {
  super();
  <names, defs:{n, d | this.<n> = <d>;}; separator="\n"><\n>
  registerAll();
}<\n>
private <class>(final <class> other, final boolean shared) {
  super(other);
  <names, copies:{n, c | this.<n> = <c>;}; separator="\n"><\n>
  registerAll();
}<\n>
private void registerAll() {
  <names:{n | addStorage(<n>);}; separator="\n">
  <if(labels)><\n><labels:{l | addLabel(<l>);}; separator="\n"><endif>
}<\n>
@Override
public ProcessingElement copy(final boolean shared) {
  return new <class>(this, shared);
}<\n>
<factory()>
>>

temporary_variables(class, names, defs) ::= <<
<names:{n | public final Memory <n>;}; separator="\n"><\n>
private <class>() {
  <names, defs:{n, d | this.<n> = <d>;}; separator="\n"><\n>
  <names:{n | addVariable(<n>);}; separator="\n">
}<\n>
<factory()>
>>

factory() ::= <<
private static final class <name>Factory implements Factory {
  @Override
  public <name> create() {
    return new <name>();
  }
}<\n>
public static Factory newFactory() {
  return new <name>Factory();
}
>>
