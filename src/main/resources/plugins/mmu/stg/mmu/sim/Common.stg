/*
 * Copyright 2015-2020 ISP RAS (http://www.ispras.ru)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

group MmuCommon;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Extern-related templates

extern_body(fnames, fvalues) ::= <<
<fnames:{n | public final Value\<BitVector> <n>;}; separator="\n"><\n>
private Extern() {
<fnames, fvalues:{n, v |   this.<n> = <v>;}; separator="\n">
}<\n>
<fnames:{n | <extern_accessor(n)>}; separator="\n\n">
>>

extern_accessor(fname) ::= <<
public BitVector <n>() {
  return <n>.value();
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Constant-related templates

constant_body(type, expr) ::= <<
@Override
public <type> value() {
  return <expr>;
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Operation-related templates

operation_body(name, addr, addr_name, stmts) ::= <<
private <name>() {}<\n>
private static <name> instance = null;<\n>
public static void register() {
  if (null == instance) {
     instance = new <name>();
     register(instance);
  }
}<\n>
@Override
public void init(final <addr> <addr_name>) {
  <stmts; separator="\n">
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Function-related templates

function_body(type, anames, atypes, stmts) ::= <<
public static <if(type)><type><else>void<endif> call(<if(anames)>
  <anames, atypes:{n, t | final <t> <n>}; separator=",\n"><endif>) {
  <stmts; separator="\n">
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Structure-related templates

struct_constructor(name, fields) ::= <<
public <name>() {
  <fields; separator="\n">
}
>>

struct_field(name, type) ::= <<
public final <type> <name>;
>>

struct_field_init(name, value) ::= <<
this.<name> = <value>;
>>

struct_body(type, fnames, ftypes, fvalues, fis_struct, fnames_rev, fis_struct_rev) ::= <<
<fnames, ftypes, fvalues:{n, t, v | public final <t> <n> = <v>;}; separator="\n"><\n>
public <type>() {
  setEntry(<if(fnames_rev)>
    BitVector.newMapping(
      <fnames_rev, fis_struct_rev:{n, fis | <n><if(fis)>.asBitVector()<endif>}; separator=",\n">
    )
  <else>
    null
  <endif>
  );
}<\n>
public <type>(final BitVector value) {
  this();
  assign(value);
}<\n>
public void assign(final <type> other) {
  <fnames:{n | this.<n>.assign(other.<n>);}; separator="\n">
}<\n>
@Override
public <type> newStruct(final BitVector value) {
  return new <type>(value);
}<\n>
@Override
public String toString() {
  <if(fnames)>
  return String.format(
    "<type> [<fnames, fis_struct : {n, fis | <n>=<if(!fis)>0x<endif>%s}; separator=", ">]",
    <fnames, fis_struct : {n, fis | <n><if(!fis)>.toHexString()<endif>}; separator=",\n">
  );
  <else>
  return "";
  <endif>
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Address-related templates

struct_get_value(field_name) ::= <<
@Override
public BitVector getValue() {
  return <field_name>;
}
>>

struct_set_value(type, temp_name, field_name) ::= <<
@Override
public <type> setValue(BitVector value) {
  final <type> <temp_name> = new <type>();
  address.<field_name>.assign(value);
  return <temp_name>;
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Segment-related templates

segment_constructor(name, pa_type, va_type, start, end) ::= <<
private <name>() {
  super(
    <start>,
    <end>
  );
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Buffer-related templates

buffer_access_point(name, type, init) ::= <<
public static <type> get() {
  return get(0);
}

private static List\<<type>\> <name>;

public static <type> get(int id) {
  if (null == <name>) {
    <init; separator="\n">
  }
  return <name>.get(id);
}
>>

buffer_entry(members) ::= <<
<class(["public", "static", "final"],
       "Entry",
       "StructBase<Entry>",
       "Struct<Entry>",
       members)>
>>

buffer_indexer(addr_type, addr_name, expr) ::= <<
private static final Indexer\<<addr_type>\> INDEXER = new Indexer\<<addr_type>\>() {
  @Override
  public BitVector getIndex(final <addr_type> <addr_name>) {
    return <expr>;
  }
};
>>

buffer_matcher(entry_type, addr_type, addr_name, data_name, expr, stmts) ::= <<
private static final Matcher\<<entry_type>, <addr_type>\> MATCHER = new Matcher\<<entry_type>, <addr_type>\>() {
  @Override
  public boolean areMatching(final <entry_type> <data_name>, final <addr_type> <addr_name>) {
    return <expr>;
  }

  @Override
  public <entry_type> assignTag(final <entry_type> <data_name>, final <addr_type> <addr_name>) {
    <stmts; separator="\n">
    return <data_name>;
  }
};
>>

buffer_constructor(name, is_reg, is_mem, entry_type, addr_type, ways, sets, policy, next) ::= <<
private <name>(Buffer\<? extends Struct\<?>, <addr_type>\> next) {
  super(
    new <entry_type>(),
    new <addr_type>(),
    <if(is_reg)>"<name>",<endif>
    new BigInteger("<sets>", 10),
    <ways>,
    <policy>,
    INDEXER,
    MATCHER<if(!is_reg && !is_mem)>,
    next<endif>
  );
}
>>

memory_constructor(entry_type, addr_type, size) ::= <<
private <name>(Object unusedObjectRef) {
  super(
    new <entry_type>(),
    new <addr_type>(),
    new BigInteger("<size>", 16)
  );
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////

mmu_constructor(name, addr_type) ::= <<
private <name>() {
  super(new <addr_type>());
}
>>

get_size(addr_size, data_size) ::= <<
@Override
public int getAddressBitSize() {
  return <addr_size>;
}<\n>
@Override
public int getDataBitSize() {
  return <data_size>;
}
>>

get_data(addr_type, addr_name, data_type, stmts) ::= <<
@Override
public <data_type> readEntry(final <addr_type> <addr_name>) {
  <stmts; separator="\n">
}
>>

set_data(addr_type, addr_name, data_type, data_name, stmts) ::= <<
@Override
public void writeEntry(final <addr_type> <addr_name>, final <data_type> <data_name>) {
  <stmts; separator="\n">
}
>>

get_mmu(addr_type, mmu_name) ::= <<
@Override
protected Mmu\<<addr_type>\> getMmu() {
  return <mmu_name>.get();
}
>>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Statement templates

if_block(expr, stmts)::= <<
if (<expr>) {
  <stmts; separator="\n">
>>

elseif_block(expr, stmts)::= <<
} else if (<expr>) {
  <stmts; separator="\n">
>>

else_block(stmts)::= <<
} else {
  <stmts; separator="\n">
}
>>
