/*
 * Copyright 2017-2019 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package ru.ispras.microtesk.tools.templgen.printers;

import ru.ispras.castle.util.FileUtils;
import ru.ispras.fortress.util.InvariantChecks;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Date;

/**
 * The {@code RubyTemplatePrinter} class prints data of template into a ruby file.
 *
 * @author <a href="mailto:protsenko@ispras.ru">Alexander Protsenko</a>
 */
public final class RubyTemplatePrinter implements TemplatePrinter {
  public static final String[] RUBY_KEYWORDS = {"and", "or", "not"};
  public static final String RUBY_TAB = "  ";

  private int nowLevel;
  private final String modelName;
  private final String templateName;
  private final String baseTemplateName;
  private final String baseTemplatePath;

  static final String TEMPLATE_FILE_NAME = "_auto.rb";
  static final String TEMPLATE_DATA_LABLE = ":data";

  private PrintWriter printWriter;

  /**
   * Constructs a ruby printer with the specified template name.
   *
   * @param templateName the template name.
   * @param modelName the model name.
   * @param baseTemplateName the base template name.
   * @param baseTemplatePath the base template path.
   * @param outputDirectory the output directory for template file.
   */
  public RubyTemplatePrinter(final String templateName, final String modelName,
      final String baseTemplateName, final String baseTemplatePath, final String outputDirectory) {
    this.modelName = modelName;
    this.templateName = templateName;
    this.baseTemplateName = baseTemplateName;
    this.baseTemplatePath = baseTemplatePath;

    final File templateFile =
        FileUtils.newFile(outputDirectory + templateName.toLowerCase() + TEMPLATE_FILE_NAME);

    try {
      printWriter = new PrintWriter(templateFile);
    } catch (final FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }

  /**
   * Constructs a ruby printer with the specified template name.
   *
   * @param templateName the template name.
   * @param modelName the model name.
   * @param baseTemplateName the base template name.
   * @param baseTemplatePath the base template path.
   */
  public RubyTemplatePrinter(final String templateName, final String modelName,
      final String baseTemplateName, final String baseTemplatePath) {
    this(templateName, modelName, baseTemplateName, baseTemplatePath, "");
  }

  @Override
  public String formattingOperation(final String operationName) {
    for (String rubyKeywords : RUBY_KEYWORDS) {
      if (rubyKeywords == operationName) {
        return operationName.toUpperCase();
      }
    }
    return operationName;
  }

  @Override
  public void templateBegin() {
    this.addHeader();
    // Adds xml data
    final String tempBaseTemplate =
        this.baseTemplateName.equals(this.modelName) ? this.modelName.toUpperCase() + "BaseTemplate"
            : this.baseTemplateName;

    final String tempBaseTemplatePath =
        this.baseTemplatePath.equals(this.modelName) ? this.modelName.toLowerCase() + "_base"
            : this.baseTemplatePath;

    this.addString("require_relative '" + tempBaseTemplatePath + "'");
    this.addString("");
    this.addString("class " + this.templateName + "GenTemplate < " + tempBaseTemplate);

    this.nowLevel++;
    this.addDataRegion();
    this.addString("def run");
    this.nowLevel++;
    // this.addString("org 0x00020000");
  }

  @Override
  public void addHeader() {
    this.addString("#");
    this.addString("# ISP RAS (http://www.ispras.ru)");
    this.addString("#");
    this.addString("# This ruby template was automatically generated by the MicroTESK tool");
    this.addString(String.format("# Generation started: %s", new Date()));
    this.addString("#");
    this.addString("");
  }

  private void addTab(final int tabCount) {
    for (int i = 0; i < tabCount; i++) {
      this.printWriter.print(RUBY_TAB);
    }
  }

  @Override
  public void addDataRegion() {
    this.addString("def pre");
    this.nowLevel++;
    this.addString("super");
    this.addString("data {");
    this.nowLevel++;
    this.addString("label " + TEMPLATE_DATA_LABLE);
    this.addString("word rand(1, 9), rand(1, 9), rand(1, 9), rand(1, 9)");
    this.addString("label :end_data");
    this.addString("space 1");
    this.nowLevel--;
    this.addString("}");
    this.nowLevel--;
    this.addString("end");
    this.addString("");
  }

  @Override
  public String getDataLabel() {
    return TEMPLATE_DATA_LABLE;
  }

  /**
   * Adds the operation to template file.
   *
   * @param operation Operation syntax.
   */
  public void addOperation(final String operation) {
    InvariantChecks.checkNotNull(operation);
    this.addTab(nowLevel);
    this.printWriter.format("%s ", formattingOperation(operation));
  }

  @Override
  public void addOperation(final String opName, final String opArguments) {
    InvariantChecks.checkNotNull(opName);
    this.addTab(nowLevel);
    this.printWriter.format("%s %s", formattingOperation(opName), opArguments);
  }

  @Override
  public void addString(final String addString) {
    InvariantChecks.checkNotNull(addString);
    this.addTab(nowLevel);
    this.printWriter.format("%s\n", addString);
  }

  @Override
  public void addText(final String addText) {
    InvariantChecks.checkNotNull(addText);
    this.printWriter.format("%s", addText);
  }

  @Override
  public void addAlignedText(final String addText) {
    InvariantChecks.checkNotNull(addText);
    this.addTab(nowLevel);
    this.printWriter.format("%s", addText);
  }

  @Override
  public void addComment(final String addText) {
    InvariantChecks.checkNotNull(addText);
    this.addTab(nowLevel);
    this.printWriter.format("# %s\n", addText);
  }

  @Override
  public void templateEnd() {
    nowLevel--;
    this.addTab(nowLevel);
    this.printWriter.println("end");
    nowLevel--;
    this.addTab(nowLevel);
    this.printWriter.println("end");
  }

  @Override
  public void templateClose() {
    this.printWriter.close();
  }

  @Override
  public void startSequence(final String addText) {
    InvariantChecks.checkNotNull(addText);
    this.addString(addText);
    nowLevel++;
  }

  @Override
  public void closeSequence(final String addText) {
    InvariantChecks.checkNotNull(addText);
    nowLevel--;
    this.addString(addText);
  }

  @Override
  public void startBlock() {
    this.addString("block(:combinator => 'product', :compositor => 'random') {");
    nowLevel++;
  }

  @Override
  public void closeBlock() {
    nowLevel--;
    this.addString("}.run");
  }
}
